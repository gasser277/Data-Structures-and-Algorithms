MD problem 1:
I used Hash to ensure time complexity of O(1) in set ang get methods. In my code the Hash is a dictionary which holds key and value. The LRU Cache is
a linked list. This combination is a hash map. The space complexity is O(n) where n = LRU cache capacity
which is defined by user

MD problem2:
I used for loop to transverse each path level, and recursion to transverse the subfolder.
time complexity is O(n) where n is number of files and folders together. This is because for the first folder (path level) for loop is made for transverse which is linear operation.
space complexity is O(n) where n is numeber of files and folders together. This is the worst case scenario. (best case is O(1))

MD problem3: 
comments are written in code for more detail. I used Heapq for priority queue.
time complexity is O(nlogn) where n is number of characters, because heap operation requires logn and its done for all n characters
space complexity is O(n+t) where n is number of char and t is tree size

MD problem 4: 
I used for loop to transverse the users withing a group and recursion for group within group
time complexity (O(n2)) because two for loops in worst case
space complexity(O(u*g)) where u is total no of users and g is total number of groups.

MD problem 5:
used linked list for block chain where each block is a node. The hash value is the reference for linkage. Each node has block data(timestamp, data, prev block hash and currentblockhash))
Time complexity(O(n)). Because linked list adds blocks in linear time. n is number of blocks
Space complexity O(n). Because we store n blocks , each block has constant number size. Therefore linear.

MD problem 6:
used set data structure to store the values of both linked list because its easy to get get their instersction and union by build in methods.
Time complexity(O(n2)) where  n is size of larger list input. Square because for loop is used for transversing elements in input list and for each element we use for loop to add in linked list
Space complexity(O(n)) where n is size of larger list


